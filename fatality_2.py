# -*- coding: utf-8 -*-
"""fatality 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QSq2m8YhZbdg4fyLLqcAs8lEh8VXDsLd
"""

import sklearn
print(sklearn.__version__)

import pandas as pd

df=pd.read_csv('/content/drive/MyDrive/datasets/fatality.csv')
df

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
#since there are 84 columns we can use for loop to encode the columns with object type
for col in list(df.columns):
  if df[col].dtype == object:
        print("Column Name: \t\t", col)
        print("Unique Values: \t\t", list(df[col].unique()) )
        print("Length: \t\t", len(df[col].unique()))
        df[col]= le.fit_transform(df[col])
        print("Encoding Done Sucessfully!!! ")

# Select the output column
y = df['hospital_death']

# Select the feature columns (excluding 'hospital_death')
X = df.drop(columns=['hospital_death'])

# Calculate correlations between features and the output
correlations = X.corrwith(y)

# Set a correlation threshold (e.g., 0.1)
correlation_threshold = 0.1

# Find columns with correlations below the threshold
low_correlation_columns = correlations[abs(correlations) < correlation_threshold].index

# Remove low-correlation columns from the DataFrame
df = df.drop(columns=low_correlation_columns)

# Now, 'data' contains only the columns with a correlation above the threshold
df

df.drop(['Unnamed: 83'],axis=1,inplace=True)
df

df.drop_duplicates()
df.dropna(inplace = True)
df

df

df.reset_index(drop=True)

X=df.iloc[:,:-1]
y=df.iloc[:,-1]
print(X)
print(y)

X.columns

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
X_scaled=scaler.fit_transform(X)

from imblearn.over_sampling import SMOTE #------>importing the library
oversample=SMOTE(random_state=1)
X_os,y_os=oversample.fit_resample(X_scaled,y)
y_os.value_counts()
from sklearn.model_selection import train_test_split
X_train_os,X_test_os,y_train_os,y_test_os=train_test_split(X_os,y_os,random_state=1,test_size=0.3)


from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report,accuracy_score,ConfusionMatrixDisplay,r2_score,precision_score,recall_score,f1_score

rf=RandomForestClassifier()
rf.fit(X_train_os,y_train_os)
y_pred_rf=rf.predict(X_test_os)

import joblib

# Save your trained model to a file
joblib.dump(rf, 'patient fatality project11.sav')

print("the accuracy_score by ",rf,"is--------->",round(accuracy_score(y_pred_rf,y_test_os)*100))
print("**************",rf,"***************","\n",classification_report(y_pred_rf,y_test_os))
print("ConfusionMatrixDisplay of ---->",rf,ConfusionMatrixDisplay.from_predictions(y_pred_rf,y_test_os))